<?php

interface DAL
{

  /**
   * Destructor
   */
  public function __destruct();

  /**
   * Connects to the database with the preset login data
   */
  public function defaultConnect();

  /**
   * Returns if the object should be treated as singleton
   *
   * @return boolean True if the object is a singleton
   */
  public static function isSingleton();

  /**
   * Resets the internal query cache.
   */
  public function reset();

  /**
   * Checks if the given connection-data is correct
   *
   * @static
   *
   * @param array $a_data
   *            The connection data
   * @return boolean True if the data is correct, otherwise false
   */
  public static function checkLogin($s_username, $s_password, $s_database,
				    $s_host = '127.0.0.1', $i_port = -1);

  /**
   * Connects to the set database
   *
   * @throws \DBException if the connection fails
   */
  public function connection($s_username, $s_password, $s_database,
			     $s_host = '127.0.0.1', $i_port = -1);

  /**
   * Closes the connection to the database
   */
  public function connectionEnd();

  /**
   * Returns the ID generated by a INSERT-command
   *
   * @return int The generated id
   */
  public function getId();

  /**
   * Returns numbers of rows affected generated by a UPDATE or DELETE command
   *
   * @return int The requested id
   */
  public function affected_rows();

  /**
   * Returns or there is a connection to the database
   *
   * @return boolean True if there is a connection with the DB, false if is not
   */
  public function isConnected();

  /**
   * Escapes the given data for save use in queries
   *
   * @param string $s_data
   *            The data that need to be escaped
   * @return string The escaped data
   */
  public function escape_string($s_data);

  /**
   * Executes the given query on the selected database
   * @deprecated      Use prepare instead
   *
   * @param string $s_query
   *            The query to execute
   *            
   * @throws \DBException when the query fails
   */
  public function query($s_query);

  /**
   * Executes the given query on the selected database with binded parameters
   * @deprecated      Use prepare instead
   *
   * @param string $s_query
   *            to execute
   * @param array $a_types
   *            types : i (int) ,d (double) ,s (string) or b (blob)
   * @param array $a_values
   *            values
   * @throws \Exception if the arguments are illegal
   * @throws \DBException when the query fails
   */
  public function queryBinded($s_query, $a_types, $a_values);

  /**
   * Executes the given query on the selected database
   *
   * @param string $s_query
   * @throws Exception if the arguments are illegal
   * @return \DAL
   */
  public function prepare($s_query);

  /**
   * Binds a string value
   *
   * @param string    $s_field  The field name
   * @param string    $s_value    The value
   * @return \DAL
   */
  public function bindString($s_field, $s_value);

  /**
   * Binds an integer value
   *
   * @param string    $s_field  The field name
   * @param float $i_value    The value
   * @return \DAL
   */
  public function bindInt($s_field, $i_value);

  /**
   * Binds a float value
   *
   * @param string    $s_field  The field name
   * @param float     $fl_value   The value
   * @return \DAL
   */
  public function bindFloat($s_field, $fl_value);

  /**
   * Binds a binary value
   *
   * @param string    $s_field  The field name
   * @param binary $value The value
   * @return \DAL
   */
  public function bindBlob($s_field, $value);

  /**
   * Runs the query
   *
   * @throws  \DBException    If the query fails
   */
  public function exequte();

  /**
   * Returns the number of results from the last executed query
   *
   * @return int The number of results
   * @throws \Exception when no SELECT-query was executed
   */
  public function num_rows();

  /**
   * Returns the result from the query with the given row and field
   *
   * @param
   *            int The row
   * @param
   *            string The field
   * @return string The content of the requested result-field
   * @throws \Exception when no SELECT-query was executed
   */
  public function result($i_row, $s_field);

  /**
   * Returns the results of the query in a numeric array
   *
   * @return array data-set
   * @throws \Exception when no SELECT-query was executed
   */
  public function fetch_row();

  /**
   * Returns the results of the query in a associate and numeric array
   *
   * @return array data-set
   * @throws \Exception when no SELECT-query was executed
   */
  public function fetch_array();

  /**
   * Returns the results of the query in a associate array
   *
   * @return array data-set
   * @throws \Exception when no SELECT-query was executed
   */
  public function fetch_assoc();

  /**
   * Returns the results of the query in a associate array with the given field as counter-key
   *
   * @param
   *            string The field that is the counter-key
   * @return array data-set sorted on the given key
   * @throws \Exception when no SELECT-query was executed
   */
  public function fetch_assoc_key($s_key);

  /**
   * Returns the results of the query as a object-array
   *
   * @return object data-set
   * @throws \Exception when no SELECT-query was executed
   */
  public function fetch_object();

  /**
   * 
   * @param int $i_column
   * @param int $i_row
   * @return string
   * @throws Exception
   */
  public function fetch_column($i_column, $i_row = 0);

  /**
   * Starts a new transaction
   *
   * @throws \DBException a transaction is already active
   */
  public function transaction();

  /**
   * Commits the current transaction
   *
   * @throws \DBException no transaction is active
   */
  public function commit();

  /**
   * Rolls the current transaction back
   *
   * @throws \DBException no transaction is active
   */
  public function rollback();

  /**
   * Analyses the given table
   *
   * @param string $s_table
   *            table name
   * @return boolean if the table is OK, otherwise false
   */
  public function analyse($s_table);

  /**
   * Repairs the given table
   *
   * @param string $s_table
   *            table name
   * @return boolean if the table repair succeeded, otherwise false
   */
  public function repair($s_table);

  /**
   * Optimises the given table
   *
   * @param string $s_table
   *            table name
   */
  public function optimize($s_table);

  /**
   * Changes the active database to the given one
   *
   * @param string $s_database
   *            database
   * @throws \DBException if the new databases does not exist or no access
   */
  public function useDB($s_database);

  /**
   * Checks if a database exists and if the user has access to it
   *
   * @param string $s_database            
   * @return boolean if the database exists, otherwise false
   */
  public function databaseExists($s_database);

  /**
   * Describes the table structure
   *
   * @param string $s_table
   *            The table name
   * @param
   *            string The structure
   * @param
   *            boolean Set to true to add "IF NOT EXISTS"
   * @param
   *            boolean Set to true to add dropping the table first
   * @throws \DBException If the table does not exists
   */
  public function describe(
  $s_table, $bo_addNotExists = false, $bo_dropTable = false
  );

  /**
   * Returns the current loaded database
   *
   * @return string
   */
  public function getDatabase();
  
  /**
   * Dumps the database to a file
   * This function requires exec()!
   * @param string $target
   */
  public function dump($target);
}
